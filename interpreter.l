/***
 From here and forward the lex files included have the
 sole purpose of interpreting tokens to send forward to
 bison. In the bison files, further work is done with
 defined grammar rules comprised of the tokens and
 their data values returned here.
***/

%{
#include <string>
#include "interpreter.tab.h"

#define YY_DECL extern "C" int yylex()

%}

/***
 Each rule returns a token identifier which is generated by bison
 and is defined in the interpreter.tab.h file. yylval is a union
 of possible data types defined in the bison file. We convert
 the value of the int or string matches and store it within the
 union structure.
***/
/*
*/

%START PREPROCESSOR


%%
<INITIAL>{

[\n]                        {yylineno++; return EOL;}

^[ \t]+                     {int count = 0; for(int i = 0; i < strlen(yytext); i++){if (yytext[i] == '\t'){count += 1;}} yylval.sVal = strdup(yytext); yylval.iVal = count; return INDENT;}

"#!".*                      {yyless(0); BEGIN(PREPROCESSOR);}

"hatch()"                   {return EXIT;}

[a-zA-Z].*                  {yylval.sVal = strdup(yytext); return PYTHONLINE;}


}

<PREPROCESSOR>{

"#!"                        {yylval.sVal = strdup(yytext); return START;}

","                         {yylval.sVal = strdup(yytext); return COMMA;}

[0-9]+                      {yylval.sVal = strdup(yytext); return NUM_I;}

[1-9]+[0-9]?\.[0-9]+        {yylval.sVal = strdup(yytext); return NUM_F;}

[0]?\.[0-9]+                {yylval.sVal = strdup(yytext); return NUM_F;}

\"[a-zA-Z0-9 \\t\\n]+\"     {yylval.sVal = strdup(yytext); return STRING;}

\'[a-zA-Z0-9 \\t\\n]+\'     {yylval.sVal = strdup(yytext); return STRING;}

"get"                       {yylval.sVal = strdup(yytext); return GET;}

"set"                       {yylval.sVal = strdup(yytext); return SET;}

"class"                     {yylval.sVal = strdup(yytext); return CLASS;}

"str"                       {yylval.sVal = strdup(yytext); return STR;}

[_a-zA-Z][_a-zA-Z0-9]*      {yylval.sVal = strdup(yytext); return VARNAME;}

"="                         {yylval.sVal = strdup(yytext); return EQUALS;}

"("				            {yylval.sVal = strdup(yytext); return LPAREN;}

")"				            {yylval.sVal = strdup(yytext); return RPAREN;}

[\n]                        {printf("\n"); unput('\n'); BEGIN(INITIAL);}

}
%%
